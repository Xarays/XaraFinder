import tkinter as tk
from tkinter import ttk, filedialog, scrolledtext, messagebox
import json, os, threading, time, subprocess, webbrowser
from pathlib import Path
from detector import Detector, SoundManager
from recycle_checker import RecycleChecker
from aquarium import Aquarium
from tool_manager import ToolManager

COLORS = {
    "bg": "#0d1117", "card": "#161b22", "card_dark": "#0d1117",
    "accent": "#58a6ff", "danger": "#f85149", "success": "#3fb950",
    "warning": "#d29922", "text": "#c9d1d9", "text_light": "#8b949e",
    "input_bg": "#1c2128", "hover": "#21262d", "scrollbar": "#30363d"
}


class App:
    def __init__(self):
        self.detector = Detector()
        self.recycle_checker = RecycleChecker()
        self.root = tk.Tk()
        self.root.title("üõ°Ô∏è GAMMA DETECTOR")
        self.root.geometry("1500x950")
        self.root.configure(bg=COLORS["bg"])

        default_threads = min(32, (os.cpu_count() or 1) * 4)

        self.settings = {
            "threads": tk.IntVar(value=default_threads),
            "tolerance": tk.DoubleVar(value=1.0),
            "min_matches": tk.IntVar(value=2),
            "cpu_limit": tk.IntVar(value=80),
            "sounds": tk.BooleanVar(value=True),
            "auto_update_db": tk.BooleanVar(value=True),
            "fast_scan": tk.BooleanVar(value=True),
            "scan_exe": tk.BooleanVar(value=True)
        }

        self.setup_styles()
        self.build()
        self.load_settings()

        self.verdict_shown = False
        self.root.mainloop()

    def setup_styles(self):
        style = ttk.Style()
        style.theme_use('clam')

        style.configure("TNotebook", background=COLORS["bg"], borderwidth=0)
        style.configure("TNotebook.Tab", background=COLORS["card"], foreground=COLORS["text"],
                        padding=[20, 10], borderwidth=0)
        style.map("TNotebook.Tab",
                  background=[("selected", COLORS["accent"])],
                  foreground=[("selected", "white")])

        style.configure("Custom.Horizontal.TProgressbar",
                        thickness=25, troughcolor=COLORS["card"],
                        background=COLORS["accent"], bordercolor=COLORS["card"])

        style.configure("Treeview",
                        background=COLORS["card"], foreground=COLORS["text"],
                        fieldbackground=COLORS["card"], borderwidth=0)
        style.configure("Treeview.Heading",
                        background=COLORS["input_bg"], foreground=COLORS["text"],
                        borderwidth=1, relief="flat")
        style.map("Treeview.Heading", background=[("active", COLORS["accent"])])
        style.map("Treeview", background=[("selected", COLORS["accent"])],
                  foreground=[("selected", "white")])

    def load_settings(self):
        try:
            if os.path.exists("detector_settings.json"):
                with open("detector_settings.json", "r") as f:
                    saved_settings = json.load(f)
                    for key, value in saved_settings.items():
                        if key in self.settings:
                            self.settings[key].set(value)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    def show_aquarium(self, event=None):
        if hasattr(self, 'aquarium') and self.aquarium and self.aquarium.window.winfo_exists():
            self.aquarium.window.lift()
            return
        self.aquarium = Aquarium(self.root)

    def show_creators(self):
        creators_window = tk.Toplevel(self.root)
        creators_window.title("–û —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö")
        creators_window.geometry("500x400")
        creators_window.configure(bg=COLORS["bg"])
        creators_window.resizable(False, False)

        header = tk.Frame(creators_window, bg=COLORS["accent"], height=80)
        header.pack(fill=tk.X)
        header.pack_propagate(False)

        tk.Label(header, text="üë®‚Äçüíª –°–û–ó–î–ê–¢–ï–õ–ò", font=("Segoe UI", 20, "bold"),
                 bg=COLORS["accent"], fg="white").pack(pady=20)

        content = tk.Frame(creators_window, bg=COLORS["card"])
        content.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        creators_info = [
            {"name": "Kara7s (Xarays)", "role": "–ì–ª–∞–≤–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "color": "#FF6B6B"},
            {"name": "Nakish_", "role": "–°–æ-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "color": "#4ECDC4"}
        ]

        for i, creator in enumerate(creators_info):
            frame = tk.Frame(content, bg=COLORS["input_bg"], relief="flat")
            frame.pack(fill=tk.X, pady=10, padx=10)

            tk.Label(frame, text=creator["name"], font=("Segoe UI", 16, "bold"),
                     bg=COLORS["input_bg"], fg=creator["color"]).pack(anchor="w", padx=15, pady=(15, 5))

            tk.Label(frame, text=creator["role"], font=("Segoe UI", 12),
                     bg=COLORS["input_bg"], fg=COLORS["text_light"]).pack(anchor="w", padx=15, pady=(0, 15))

        tk.Button(content, text="üê† –û—Ç–∫—Ä—ã—Ç—å –∞–∫–≤–∞—Ä–∏—É–º", command=self.show_aquarium,
                  bg=COLORS["accent"], fg="white", font=("Segoe UI", 12, "bold"),
                  relief="flat", pady=10).pack(pady=20)

        tk.Button(creators_window, text="–ó–∞–∫—Ä—ã—Ç—å", command=creators_window.destroy,
                  bg=COLORS["hover"], fg="white", font=("Segoe UI", 10),
                  relief="flat", padx=30, pady=10).pack(pady=10)

    def start_comprehensive_scan(self):
        """–ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø –í–°–ï–• –î–ò–°–ö–û–í"""
        if not messagebox.askyesno("–í–ù–ò–ú–ê–ù–ò–ï",
                                   "üö® –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –î–ò–°–ö–û–í!\n\n"
                                   "–≠—Ç–æ –∑–∞–π–º–µ—Ç –û–ß–ï–ù–¨ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤).\n"
                                   "–°–∫–∞–Ω–∏—Ä—É—é—Ç—Å—è –í–°–ï —Ñ–∞–π–ª—ã –Ω–∞ –í–°–ï–• –¥–∏—Å–∫–∞—Ö.\n\n"
                                   "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"):
            return

        self.verdict_label.config(
            text="üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø...",
            bg=COLORS["warning"],
            fg="white",
            font=("Segoe UI", 14, "bold")
        )

        if self.settings["sounds"].get():
            SoundManager.play_scan_start()

        for item in self.results_tree.get_children():
            self.results_tree.delete(item)

        self.log_text.delete(1.0, tk.END)

        for key in self.stats_labels:
            self.stats_labels[key].config(text="0")

        self.progress_bar["value"] = 0

        self.scan_btn.config(state=tk.DISABLED)
        self.stop_btn.config(state=tk.NORMAL)

        self.log_message("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø –í–°–ï–• –î–ò–°–ö–û–í!")
        self.log_message("‚ö†Ô∏è –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤!")
        self.log_message("üîç –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –¥–∏—Å–∫–∏: C:\\\\, D:\\\\, E:\\\\ –∏ —Ç.–¥.")

        scan_thread = threading.Thread(target=self._comprehensive_scan_thread, daemon=True)
        scan_thread.start()

    def _comprehensive_scan_thread(self):
        """–ü–û–¢–û–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø"""
        start_time = time.time()
        all_jars = []

        # –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏—Å–∫–∏
        for drive_letter in "CDEFGHIJKLMNOPQRSTUVWXYZ":
            drive_path = f"{drive_letter}:\\"
            if os.path.exists(drive_path):
                self.log_message(f"üîç –°–∫–∞–Ω–∏—Ä—É–µ–º –¥–∏—Å–∫ {drive_path}...")
                drive_jars = self.detector.scan_entire_drive(drive_letter)
                all_jars.extend(drive_jars)
                self.log_message(f"üì¶ –ù–∞ –¥–∏—Å–∫–µ {drive_path} –Ω–∞–π–¥–µ–Ω–æ: {len(drive_jars)} JAR —Ñ–∞–π–ª–æ–≤")

        self.log_message(f"üéØ –í–°–ï–ì–û –ù–ê–ô–î–ï–ù–û JAR –§–ê–ô–õ–û–í: {len(all_jars)}")

        if not all_jars:
            self.log_message("‚ÑπÔ∏è JAR —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            self.scan_finished()
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        results = self.detector.scan(all_jars, self.update_progress, self.log_message, self.settings["scan_exe"].get())

        total_time = time.time() - start_time
        self.log_message(f"‚è±Ô∏è –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        self.log_message(f"üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {len(all_jars) / total_time:.1f} —Ñ–∞–π–ª–æ–≤/—Å–µ–∫—É–Ω–¥—É")

        for result in results:
            self.add_scan_result(result)

        self.show_verdict(bool(results), len(results))

        if results:
            self.log_message(f"üö® –û–ë–ù–ê–†–£–ñ–ï–ù–û –£–ì–†–û–ó: {len(results)}")
            self.log_message("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
            self.log_message("‚ïë         üî¥ –í–ï–†–î–ò–ö–¢: –ß–ò–¢–ï–†!         ‚ïë")
            self.log_message("‚ïë    –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —á–∏—Ç—ã –∏ –º–æ–¥—ã!         ‚ïë")
            self.log_message("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
        else:
            self.log_message("‚úÖ –£–≥—Ä–æ–∑ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ - —Å–∏—Å—Ç–µ–º–∞ —á–∏—Å—Ç–∞!")
            self.log_message("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
            self.log_message("‚ïë         üü¢ –í–ï–†–î–ò–ö–¢: –ß–ò–°–¢!          ‚ïë")
            self.log_message("‚ïë     –ß–∏—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã!            ‚ïë")
            self.log_message("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")

        self.scan_finished()

    def build(self):
        header = tk.Frame(self.root, bg=COLORS["accent"], height=75)
        header.pack(fill=tk.X)
        header.pack_propagate(False)

        self.header_label = tk.Label(header, text="üõ°Ô∏è GAMMA DETECTOR",
                                     font=("Segoe UI", 24, "bold"), bg=COLORS["accent"],
                                     fg="white", cursor="hand2")
        self.header_label.pack(side=tk.LEFT, padx=25, pady=22)
        self.header_label.bind("<Double-Button-1>", self.show_aquarium)

        creators_btn = tk.Button(header, text="üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª–∏", command=self.show_creators,
                                 bg=COLORS["hover"], fg="white", font=("Segoe UI", 10, "bold"),
                                 relief="flat", padx=15)
        creators_btn.pack(side=tk.RIGHT, padx=10, pady=22)

        db_info = self.detector.db.get_database_info()
        db_label = tk.Label(header,
                            text=f"–ë–∞–∑–∞: {db_info['total']} —á–∏—Ç–æ–≤ | –û–±–Ω–æ–≤–ª–µ–Ω–æ: {db_info['last_update'] or '–ù–∏–∫–æ–≥–¥–∞'}",
                            font=("Segoe UI", 11), bg=COLORS["accent"], fg="white")
        db_label.pack(side=tk.RIGHT, padx=25, pady=22)

        tabs = ttk.Notebook(self.root)
        tabs.pack(fill=tk.BOTH, expand=True, padx=15, pady=15)

        scan_tab = tk.Frame(tabs, bg=COLORS["bg"])
        tabs.add(scan_tab, text="üîç –°–∫–∞–Ω–µ—Ä")
        self.build_scanner(scan_tab)

        settings_tab = tk.Frame(tabs, bg=COLORS["bg"])
        tabs.add(settings_tab, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.build_settings_tab(settings_tab)

        tools_tab = tk.Frame(tabs, bg=COLORS["bg"])
        tabs.add(tools_tab, text="üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        self.build_tools_tab(tools_tab)

        db_tab = tk.Frame(tabs, bg=COLORS["bg"])
        tabs.add(db_tab, text="üóÉÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
        self.build_database_tab(db_tab)

    def build_scanner(self, parent):
        ctrl = tk.Frame(parent, bg=COLORS["card"], relief="flat")
        ctrl.pack(fill=tk.X, padx=10, pady=10)

        tk.Label(ctrl, text="üìÅ –ü—É—Ç—å:", bg=COLORS["card"], fg=COLORS["text"],
                 font=("Segoe UI", 11, "bold")).grid(row=0, column=0, padx=15, pady=15, sticky="w")

        self.path_var = tk.StringVar(value=str(Path.home() / ".minecraft" / "mods"))
        tk.Entry(ctrl, textvariable=self.path_var, width=65, font=("Consolas", 10),
                 bg=COLORS["input_bg"], fg=COLORS["text"], insertbackground=COLORS["text"],
                 relief="flat").grid(row=0, column=1, padx=10, pady=15)

        tk.Button(ctrl, text="üìÇ", command=self.browse_path,
                  bg=COLORS["hover"], fg=COLORS["text"], font=("Segoe UI", 10, "bold"),
                  relief="flat", padx=15, pady=10, cursor="hand2").grid(row=0, column=2, padx=5, pady=15)

        self.scan_btn = tk.Button(ctrl, text="üéØ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", command=self.start_scan,
                                  bg=COLORS["success"], fg="white", font=("Segoe UI", 11, "bold"),
                                  relief="flat", padx=25, pady=12, cursor="hand2")
        self.scan_btn.grid(row=0, column=3, padx=15, pady=15)

        # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –æ–±—ã—á–Ω–æ–π –∫–Ω–æ–ø–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.comprehensive_btn = tk.Button(ctrl, text="üåç –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                                           command=self.start_comprehensive_scan,
                                           bg=COLORS["danger"], fg="white", font=("Segoe UI", 11, "bold"),
                                           relief="flat", padx=25, pady=12, cursor="hand2")
        self.comprehensive_btn.grid(row=0, column=5, padx=15, pady=15)

        self.stop_btn = tk.Button(ctrl, text="‚èπ –°—Ç–æ–ø", command=self.stop_scan,
                                  bg=COLORS["danger"], fg="white", font=("Segoe UI", 10, "bold"),
                                  relief="flat", state=tk.DISABLED, padx=18, pady=12)
        self.stop_btn.grid(row=0, column=4, padx=5, pady=15)

        stats = tk.Frame(parent, bg=COLORS["bg"])
        stats.pack(fill=tk.X, padx=10, pady=10)

        self.stats_labels = {}
        for i, (key, label, color) in enumerate([
            ("total", "–í—Å–µ–≥–æ", COLORS["accent"]),
            ("checked", "–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ", "#4fc3f7"),
            ("found", "–ù–∞–π–¥–µ–Ω–æ", COLORS["danger"]),
            ("clean", "–ß–∏—Å—Ç–æ", COLORS["success"])
        ]):
            card = tk.Frame(stats, bg=COLORS["card"], relief="flat")
            card.grid(row=0, column=i, padx=10, pady=10, sticky="nsew")

            tk.Frame(card, bg=color, height=4).pack(fill=tk.X)

            val = tk.Label(card, text="0", font=("Segoe UI", 30, "bold"),
                           fg=color, bg=COLORS["card"])
            val.pack(pady=(18, 5))

            tk.Label(card, text=label, font=("Segoe UI", 10),
                     fg=COLORS["text_light"], bg=COLORS["card"]).pack(pady=(0, 18))

            self.stats_labels[key] = val
            stats.columnconfigure(i, weight=1)

        mon = tk.Frame(stats, bg=COLORS["card"], relief="flat")
        mon.grid(row=0, column=4, padx=10, pady=10, sticky="nsew")

        tk.Label(mon, text="‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞", font=("Segoe UI", 10, "bold"),
                 bg=COLORS["card"], fg=COLORS["text"]).pack(pady=(10, 5))

        self.cpu_label = tk.Label(mon, text="CPU: 0%", font=("Consolas", 10),
                                  bg=COLORS["card"], fg=COLORS["warning"])
        self.cpu_label.pack(pady=2)

        self.mem_label = tk.Label(mon, text="RAM: 0%", font=("Consolas", 10),
                                  bg=COLORS["card"], fg=COLORS["warning"])
        self.mem_label.pack(pady=(2, 10))

        prog_cont = tk.Frame(parent, bg=COLORS["card"], relief="flat")
        prog_cont.pack(fill=tk.X, padx=10, pady=5)

        self.progress_bar = ttk.Progressbar(prog_cont, mode="determinate",
                                            style="Custom.Horizontal.TProgressbar")
        self.progress_bar.pack(fill=tk.X, padx=2, pady=2)

        content = tk.Frame(parent, bg=COLORS["bg"])
        content.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        left = tk.Frame(content, bg=COLORS["card"], relief="flat")
        left.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))

        hdr = tk.Frame(left, bg=COLORS["danger"], height=45)
        hdr.pack(fill=tk.X)
        hdr.pack_propagate(False)

        tk.Label(hdr, text="üö® –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –£–ì–†–û–ó–´", font=("Segoe UI", 13, "bold"),
                 bg=COLORS["danger"], fg="white").pack(pady=12)

        res_cont = tk.Frame(left, bg=COLORS["card"])
        res_cont.pack(fill=tk.BOTH, expand=True, padx=2, pady=2)

        self.results_tree = ttk.Treeview(res_cont,
                                         columns=("file", "size", "type", "cheat", "score", "conditions"),
                                         show="headings", height=15)

        for col, text, width in [
            ("file", "–§–∞–π–ª", 250),
            ("size", "–†–∞–∑–º–µ—Ä (KB)", 90),
            ("type", "–¢–∏–ø", 60),
            ("cheat", "–¢–∏–ø —á–∏—Ç–∞", 160),
            ("score", "–°–æ–≤–ø–∞–¥–µ–Ω–∏–π", 80),
            ("conditions", "–£—Å–ª–æ–≤–∏—è", 180)
        ]:
            self.results_tree.heading(col, text=text)
            self.results_tree.column(col, width=width)

        scroll_y = ttk.Scrollbar(res_cont, orient="vertical", command=self.results_tree.yview)
        scroll_x = ttk.Scrollbar(res_cont, orient="horizontal", command=self.results_tree.xview)
        self.results_tree.configure(yscrollcommand=scroll_y.set, xscrollcommand=scroll_x.set)

        self.results_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scroll_y.pack(side=tk.RIGHT, fill=tk.Y)
        scroll_x.pack(side=tk.BOTTOM, fill=tk.X)

        self.results_tree.bind("<Double-1>", self.open_file_location)
        self.results_tree.bind("<Button-3>", self.show_threat_details)

        right = tk.Frame(content, bg=COLORS["card"], width=420, relief="flat")
        right.pack(side=tk.RIGHT, fill=tk.BOTH, padx=(5, 0))
        right.pack_propagate(False)

        t_hdr = tk.Frame(right, bg=COLORS["warning"], height=45)
        t_hdr.pack(fill=tk.X)
        t_hdr.pack_propagate(False)

        tk.Label(t_hdr, text="üîß –ò–ù–°–¢–†–£–ú–ï–ù–¢–´", font=("Segoe UI", 12, "bold"),
                 bg=COLORS["warning"], fg="white").pack(pady=12)

        tools = tk.Frame(right, bg=COLORS["card"])
        tools.pack(fill=tk.X, padx=15, pady=15)

        tk.Button(tools, text="üóë –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", command=self.check_recycle_bin,
                  bg=COLORS["hover"], fg=COLORS["text"], font=("Segoe UI", 11, "bold"),
                  relief="flat", cursor="hand2", pady=12).pack(fill=tk.X, pady=5)

        verdict_frame = tk.Frame(right, bg=COLORS["card_dark"], relief="flat", borderwidth=2)
        verdict_frame.pack(fill=tk.X, padx=15, pady=10)

        self.verdict_label = tk.Label(verdict_frame, text="üîç –û–ñ–ò–î–ê–ù–ò–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø",
                                      font=("Segoe UI", 14, "bold"), bg=COLORS["card_dark"],
                                      fg=COLORS["text_light"], pady=20)
        self.verdict_label.pack(fill=tk.X)

        search = tk.Frame(right, bg=COLORS["card"])
        search.pack(fill=tk.X, padx=15, pady=10)

        s_hdr = tk.Frame(search, bg=COLORS["accent"], height=40)
        s_hdr.pack(fill=tk.X, pady=(0, 15))
        s_hdr.pack_propagate(False)

        tk.Label(s_hdr, text="üîç –†—É—á–Ω–æ–π –ø–æ–∏—Å–∫", font=("Segoe UI", 12, "bold"),
                 bg=COLORS["accent"], fg="white").pack(pady=10)

        w_cont = tk.Frame(search, bg=COLORS["card"])
        w_cont.pack(fill=tk.X, pady=8)

        tk.Label(w_cont, text="–í–µ—Å (KB ¬±1KB):", bg=COLORS["card"],
                 fg=COLORS["text"], font=("Segoe UI", 10), width=14, anchor="w").pack(side=tk.LEFT, padx=(0, 10))
        self.search_weight = tk.Entry(w_cont, width=20, font=("Consolas", 10),
                                      bg=COLORS["input_bg"], fg=COLORS["text"],
                                      insertbackground=COLORS["text"], relief="flat")
        self.search_weight.pack(side=tk.LEFT, fill=tk.X, expand=True)

        n_cont = tk.Frame(search, bg=COLORS["card"])
        n_cont.pack(fill=tk.X, pady=8)

        tk.Label(n_cont, text="–ù–∞–∑–≤–∞–Ω–∏–µ:", bg=COLORS["card"],
                 fg=COLORS["text"], font=("Segoe UI", 10), width=14, anchor="w").pack(side=tk.LEFT, padx=(0, 10))
        self.search_name = tk.Entry(n_cont, width=20, font=("Consolas", 10),
                                    bg=COLORS["input_bg"], fg=COLORS["text"],
                                    insertbackground=COLORS["text"], relief="flat")
        self.search_name.pack(side=tk.LEFT, fill=tk.X, expand=True)

        tk.Button(search, text="üîé –ò—Å–∫–∞—Ç—å", command=self.search_database,
                  bg=COLORS["accent"], fg="white", font=("Segoe UI", 10, "bold"),
                  relief="flat", cursor="hand2", pady=10).pack(fill=tk.X, pady=(15, 0))

        log = tk.Frame(right, bg=COLORS["card"])
        log.pack(fill=tk.BOTH, expand=True, padx=15, pady=15)

        l_hdr = tk.Frame(log, bg=COLORS["input_bg"], height=35)
        l_hdr.pack(fill=tk.X, pady=(0, 5))
        l_hdr.pack_propagate(False)

        tk.Label(l_hdr, text="üìã –ñ—É—Ä–Ω–∞–ª (—É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π)", font=("Segoe UI", 11, "bold"),
                 bg=COLORS["input_bg"], fg=COLORS["text"]).pack(pady=8, padx=10, anchor="w")

        self.log_text = scrolledtext.ScrolledText(log, height=12,
                                                  bg=COLORS["card"], fg=COLORS["text"],
                                                  font=("Consolas", 9), wrap=tk.WORD,
                                                  insertbackground=COLORS["text"],
                                                  relief="flat", borderwidth=0)
        self.log_text.pack(fill=tk.BOTH, expand=True)

    def build_settings_tab(self, parent):
        hdr = tk.Frame(parent, bg=COLORS["accent"], height=60)
        hdr.pack(fill=tk.X, pady=(0, 20))
        hdr.pack_propagate(False)

        tk.Label(hdr, text="‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –í–´–°–û–ö–û–ô –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò", font=("Segoe UI", 16, "bold"),
                 bg=COLORS["accent"], fg="white").pack(pady=18, padx=20, anchor="w")

        settings_data = [
            ("üî¢ –ü–æ—Ç–æ–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
             f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: {min(32, (os.cpu_count() or 1) * 4)})", "threads",
             (1, 32, 1)),
            ("üìä –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤–µ—Å–∞", "–î–æ–ø—É—Å—Ç–∏–º–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (KB)", "tolerance", (0.1, 10.0, 0.1)),
            ("üéØ –ú–∏–Ω. —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π", "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏", "min_matches", (1, 3, 1)),
            ("‚ö° –ö–æ–Ω—Ç—Ä–æ–ª—å CPU", "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä (%)", "cpu_limit", (50, 100, 5)),
            ("üîä –ó–≤—É–∫–∏", "–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –∑–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "sounds", None),
            ("üöÄ –ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)", "fast_scan", None),
            ("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å EXE", "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å .exe —Ñ–∞–π–ª—ã (–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ Nursultan –∏ –¥—Ä—É–≥–∏—Ö)", "scan_exe", None)
        ]

        for title, desc, key, range_vals in settings_data:
            card = tk.Frame(parent, bg=COLORS["card"], relief="flat")
            card.pack(fill=tk.X, padx=25, pady=10)

            left_part = tk.Frame(card, bg=COLORS["card"])
            left_part.pack(side=tk.LEFT, fill=tk.Y, padx=20, pady=20)

            tk.Label(left_part, text=title, font=("Segoe UI", 13, "bold"),
                     bg=COLORS["card"], fg=COLORS["text"]).pack(anchor="w")

            tk.Label(left_part, text=desc, font=("Segoe UI", 9),
                     bg=COLORS["card"], fg=COLORS["text_light"]).pack(anchor="w", pady=(5, 0))

            if range_vals:
                spin = tk.Spinbox(card, from_=range_vals[0], to=range_vals[1],
                                  increment=range_vals[2], textvariable=self.settings[key],
                                  width=10, font=("Consolas", 11), bg=COLORS["input_bg"],
                                  fg=COLORS["text"], relief="flat")
                spin.pack(side=tk.RIGHT, padx=20, pady=20)
            else:
                cb = tk.Checkbutton(card, variable=self.settings[key],
                                    bg=COLORS["card"], fg=COLORS["text"],
                                    selectcolor=COLORS["input_bg"])
                cb.pack(side=tk.RIGHT, padx=20, pady=20)

        perf_card = tk.Frame(parent, bg=COLORS["success"], relief="flat")
        perf_card.pack(fill=tk.X, padx=25, pady=15)

        perf_text = """
        üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:

        ‚Ä¢ –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        ‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º –∏ –ø—É—Ç—è–º  
        ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ JAR —Ñ–∞–π–ª–æ–≤
        ‚Ä¢ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–µ–∫—Å–æ–≤
        ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ç–æ–∫–æ–≤ –ø–æ —è–¥—Ä–∞–º CPU
        ‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        ‚Ä¢ –£–õ–£–ß–®–ï–ù–ù–û–ï –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ + –∫–ª–∞—Å—Å—ã + –≤–µ—Å
        ‚Ä¢ –ú–∏–Ω–∏–º—É–º 2 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏
        ‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –±–∞–≥–∏ —Å –ø–æ–∏—Å–∫–æ–º NekoClient –∏ –¥—Ä—É–≥–∏—Ö —á–∏—Ç–æ–≤
        ‚Ä¢ üî• –û–ë–ù–û–í–õ–ï–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ .exe —Ñ–∞–π–ª–æ–≤ (Nursultan)
                """

        tk.Label(perf_card, text=perf_text, font=("Consolas", 9),
                 bg=COLORS["success"], fg="white", justify=tk.LEFT).pack(padx=15, pady=15)

        apply_btn = tk.Button(parent, text="üíæ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", command=self.apply_settings,
                              bg=COLORS["success"], fg="white", font=("Segoe UI", 12, "bold"),
                              relief="flat", padx=30, pady=15, cursor="hand2")
        apply_btn.pack(pady=20)

    def build_tools_tab(self, parent):
        canvas = tk.Canvas(parent, bg=COLORS["bg"], highlightthickness=0)
        scrollbar = ttk.Scrollbar(parent, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg=COLORS["bg"])

        scrollable_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        hdr = tk.Frame(scrollable_frame, bg=COLORS["accent"], height=60)
        hdr.pack(fill=tk.X, pady=(0, 20))
        hdr.pack_propagate(False)

        tk.Label(hdr, text="üõ†Ô∏è –í–ù–ï–®–ù–ò–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´", font=("Segoe UI", 16, "bold"),
                 bg=COLORS["accent"], fg="white").pack(pady=18, padx=20, anchor="w")

        download_frame = tk.Frame(scrollable_frame, bg=COLORS["card"], relief="flat")
        download_frame.pack(fill=tk.X, padx=25, pady=15)

        tk.Button(download_frame, text="üì¶ –°–ö–ê–ß–ê–¢–¨ –í–°–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´",
                  command=ToolManager.download_all_tools,
                  bg=COLORS["success"], fg="white", font=("Segoe UI", 12, "bold"),
                  relief="flat", pady=15, cursor="hand2").pack(fill=tk.X, pady=10)

        tk.Label(download_frame, text="–°–æ–∑–¥–∞–µ—Ç –∞—Ä—Ö–∏–≤ —Å–æ –≤—Å–µ–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏",
                 font=("Segoe UI", 9), bg=COLORS["card"], fg=COLORS["text_light"]).pack(pady=(0, 10))

        tools_data = [
            ("Everything", "https://www.voidtools.com", "–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤", "üîç"),
            ("System Informer", "https://systeminformer.sourceforge.io", "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤", "üìä"),
            ("WinPrefetchView", "https://www.nirsoft.net/utils/win_prefetch_view.html", "–ê–Ω–∞–ª–∏–∑ Prefetch", "üìÇ"),
            ("Process Monitor", "https://docs.microsoft.com/en-us/sysinternals/downloads/procmon", "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã",
             "üëÅÔ∏è"),
            ("HashCalc", "https://www.slavasoft.com/hashcalc/", "–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ö–µ—à–µ–π", "üî¢"),
            ("Wireshark", "https://www.wireshark.org/", "–ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞", "üåê"),
            ("Process Explorer", "https://docs.microsoft.com/en-us/sysinternals/downloads/process-explorer",
             "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤", "üî¨"),
            ("Autoruns", "https://docs.microsoft.com/en-us/sysinternals/downloads/autoruns", "–ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–µ—Ä–≤–∏—Å—ã",
             "üöÄ"),
            ("TCPView", "https://docs.microsoft.com/en-us/sysinternals/downloads/tcpview", "–°–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", "üîå")
        ]

        for name, url, desc, icon in tools_data:
            card = tk.Frame(scrollable_frame, bg=COLORS["card"], relief="flat")
            card.pack(fill=tk.X, padx=25, pady=10)

            left = tk.Frame(card, bg=COLORS["card"])
            left.pack(side=tk.LEFT, fill=tk.Y, padx=20, pady=20)

            tk.Label(left, text=icon, font=("Segoe UI", 24), bg=COLORS["card"], fg=COLORS["accent"]).pack(side=tk.LEFT,
                                                                                                          padx=(0, 15))
            tk.Label(left, text=name, font=("Segoe UI", 13, "bold"), bg=COLORS["card"], fg=COLORS["text"]).pack(
                side=tk.LEFT)

            tk.Label(card, text=desc, bg=COLORS["card"], fg=COLORS["text_light"],
                     font=("Segoe UI", 10)).pack(side=tk.LEFT, padx=20, pady=20, fill=tk.X, expand=True)

            tk.Button(card, text="–°–∫–∞—á–∞—Ç—å ‚§¥", command=lambda u=url: webbrowser.open(u),
                      bg=COLORS["accent"], fg="white", font=("Segoe UI", 10, "bold"),
                      relief="flat", cursor="hand2", padx=20, pady=10).pack(side=tk.RIGHT, padx=20, pady=15)

        tools_hdr = tk.Frame(scrollable_frame, bg=COLORS["warning"], height=45)
        tools_hdr.pack(fill=tk.X, padx=25, pady=(30, 10))
        tools_hdr.pack_propagate(False)

        tk.Label(tools_hdr, text="üõ†Ô∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´", font=("Segoe UI", 14, "bold"),
                 bg=COLORS["warning"], fg="white").pack(pady=10)

        actions_frame = tk.Frame(scrollable_frame, bg=COLORS["bg"])
        actions_frame.pack(fill=tk.X, padx=25, pady=10)

        quick_actions = [
            ("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —Å–∫–∞–Ω–µ—Ä–∞", self.clear_cache),
            ("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã", self.show_db_stats),
            ("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É", self.update_database),
            ("üìù –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", self.export_results),
            ("üîç –ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", self.quick_scan),
            ("üìÑ –¢–µ–∫—Å—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä", self.text_detector)
        ]

        for i, (text, command) in enumerate(quick_actions):
            btn = tk.Button(actions_frame, text=text, command=command,
                            bg=COLORS["hover"], fg=COLORS["text"], font=("Segoe UI", 10),
                            relief="flat", cursor="hand2", pady=8)
            btn.grid(row=i // 3, column=i % 3, padx=5, pady=5, sticky="ew")
            actions_frame.columnconfigure(i % 3, weight=1)

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

    def build_database_tab(self, parent):
        hdr = tk.Frame(parent, bg=COLORS["accent"], height=60)
        hdr.pack(fill=tk.X, pady=(0, 20))
        hdr.pack_propagate(False)

        tk.Label(hdr, text="üóÉÔ∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ó–û–ô –î–ê–ù–ù–´–•", font=("Segoe UI", 16, "bold"),
                 bg=COLORS["accent"], fg="white").pack(pady=18, padx=20, anchor="w")

        content = tk.Frame(parent, bg=COLORS["card"])
        content.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        info_frame = tk.Frame(content, bg=COLORS["input_bg"], relief="flat")
        info_frame.pack(fill=tk.X, pady=(0, 15))

        db_info = self.detector.db.get_database_info()

        info_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:

‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {db_info['total']}
‚Ä¢ –ó–∞–ø–∏—Å–µ–π —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏: {db_info['with_sizes']}
‚Ä¢ –ó–∞–ø–∏—Å–µ–π —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏: {db_info['with_dirs']}
‚Ä¢ –ó–∞–ø–∏—Å–µ–π —Å –∫–ª–∞—Å—Å–∞–º–∏: {db_info['with_classes']}
‚Ä¢ –í —Å—Ç—Ä–æ–≥–æ–º —Ä–µ–∂–∏–º–µ: {db_info['strict_mode']}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {db_info['last_update'] or '–ù–∏–∫–æ–≥–¥–∞'}
"""
        tk.Label(info_frame, text=info_text, font=("Consolas", 10),
                 bg=COLORS["input_bg"], fg=COLORS["text"], justify=tk.LEFT).pack(padx=15, pady=15)

        buttons_frame = tk.Frame(content, bg=COLORS["card"])
        buttons_frame.pack(fill=tk.X, pady=10)

        action_buttons = [
            ("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–∑ Google Sheets", self.update_database),
            ("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å", self.validate_database),
            ("üíæ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø", self.create_backup),
            ("üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞", self.restore_backup),
            ("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏", self.show_database_manager)
        ]

        for text, command in action_buttons:
            btn = tk.Button(buttons_frame, text=text, command=command,
                            bg=COLORS["hover"], fg=COLORS["text"], font=("Segoe UI", 10),
                            relief="flat", cursor="hand2", pady=8)
            btn.pack(fill=tk.X, pady=5)

        list_frame = tk.Frame(content, bg=COLORS["card"])
        list_frame.pack(fill=tk.BOTH, expand=True, pady=(15, 0))

        tk.Label(list_frame, text="üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:", font=("Segoe UI", 11, "bold"),
                 bg=COLORS["card"], fg=COLORS["text"]).pack(anchor="w", pady=(0, 10))

        list_container = tk.Frame(list_frame, bg=COLORS["card"])
        list_container.pack(fill=tk.BOTH, expand=True)

        scrollbar = ttk.Scrollbar(list_container)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        self.cheat_list = tk.Listbox(list_container, yscrollcommand=scrollbar.set,
                                     bg=COLORS["input_bg"], fg=COLORS["text"],
                                     font=("Consolas", 9), selectbackground=COLORS["accent"])
        self.cheat_list.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        scrollbar.config(command=self.cheat_list.yview)

        self.update_cheat_list()

        self.cheat_list.bind("<Double-Button-1>", lambda e: self.show_cheat_details())

        tk.Button(content, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", command=self.update_cheat_list,
                  bg=COLORS["accent"], fg="white", font=("Segoe UI", 10, "bold"),
                  relief="flat", padx=20, pady=8, cursor="hand2").pack(pady=10)

    def update_cheat_list(self):
        self.cheat_list.delete(0, tk.END)

        for name, data in self.detector.db.cheat_database.items():
            has_size = "üìè" if data.get("sizes_kb") else "„ÄÄ"
            has_dir = "üìÅ" if data.get("directories") else "„ÄÄ"
            has_class = "üìÑ" if data.get("classes") else "„ÄÄ"
            strict = "üîí" if data.get("strict_mode") else "„ÄÄ"

            self.cheat_list.insert(tk.END, f"{has_size}{has_dir}{has_class}{strict} {name}")

    def show_cheat_details(self):
        selection = self.cheat_list.curselection()
        if not selection:
            return

        cheat_name = self.cheat_list.get(selection[0]).split(" ", 1)[1]
        cheat_data = self.detector.db.cheat_database.get(cheat_name)

        if not cheat_data:
            return

        details_window = tk.Toplevel(self.root)
        details_window.title(f"–î–µ—Ç–∞–ª–∏: {cheat_name}")
        details_window.geometry("600x500")
        details_window.configure(bg=COLORS["bg"])
        details_window.resizable(False, False)

        header = tk.Frame(details_window, bg=COLORS["accent"], height=50)
        header.pack(fill=tk.X)
        header.pack_propagate(False)

        tk.Label(header, text=f"üìã {cheat_name}", font=("Segoe UI", 14, "bold"),
                 bg=COLORS["accent"], fg="white").pack(pady=15)

        content = tk.Frame(details_window, bg=COLORS["card"])
        content.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        details_text = f"""
–û–ø–∏—Å–∞–Ω–∏–µ: {cheat_data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}

üìè –†–∞–∑–º–µ—Ä—ã: {', '.join(map(str, cheat_data.get('sizes_kb', []))) or '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}

üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:
{chr(10).join(f'  ‚Ä¢ {dir}' for dir in cheat_data.get('directories', [])) or '  –ù–µ —É–∫–∞–∑–∞–Ω—ã'}

üìÑ –ö–ª–∞—Å—Å—ã:
{chr(10).join(f'  ‚Ä¢ {cls}' for cls in cheat_data.get('classes', [])) or '  –ù–µ —É–∫–∞–∑–∞–Ω—ã'}

‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
  ‚Ä¢ –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º: {'–î–∞' if cheat_data.get('strict_mode') else '–ù–µ—Ç'}
  ‚Ä¢ –ú–∏–Ω. —É—Å–ª–æ–≤–∏–π: {cheat_data.get('min_conditions', 2)}
  ‚Ä¢ –ò—Å–∫–ª—é—á–µ–Ω–∏—è: {len(cheat_data.get('exclude_dirs', []))}
"""
        details_label = tk.Label(content, text=details_text, font=("Consolas", 9),
                                 bg=COLORS["card"], fg=COLORS["text"], justify=tk.LEFT)
        details_label.pack(fill=tk.BOTH, expand=True)

        tk.Button(content, text="–ó–∞–∫—Ä—ã—Ç—å", command=details_window.destroy,
                  bg=COLORS["hover"], fg="white", font=("Segoe UI", 10),
                  relief="flat", padx=20, pady=8).pack(pady=10)

    def apply_settings(self):
        try:
            self.detector.max_threads = self.settings["threads"].get()
            self.detector.tolerance_kb = self.settings["tolerance"].get()

            settings_data = {
                "threads": self.settings["threads"].get(),
                "tolerance": self.settings["tolerance"].get(),
                "min_matches": self.settings["min_matches"].get(),
                "cpu_limit": self.settings["cpu_limit"].get(),
                "sounds": self.settings["sounds"].get(),
                "fast_scan": self.settings["fast_scan"].get(),
                "scan_exe": self.settings["scan_exe"].get()
            }

            with open("detector_settings.json", "w") as f:
                json.dump(settings_data, f)

            self.log_message("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!\n\n" +
                                f"–ü–æ—Ç–æ–∫–∏: {self.detector.max_threads}\n" +
                                f"–ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {'–í–ö–õ' if self.settings['fast_scan'].get() else '–í–´–ö–õ'}\n" +
                                f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ EXE: {'–í–ö–õ' if self.settings['scan_exe'].get() else '–í–´–ö–õ'}")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {str(e)}")

    def show_verdict(self, has_threats, threat_count=0):
        if has_threats:
            self.verdict_label.config(
                text=f"üö® –í–ï–†–î–ò–ö–¢: –°–ö–û–†–ï–ï –í–°–ï–ì–û –ß–ò–¢–ï–†!",
                bg=COLORS["danger"],
                fg="white",
                font=("Segoe UI", 16, "bold")
            )
            if self.settings["sounds"].get():
                SoundManager.play_threat_found()
        else:
            self.verdict_label.config(
                text="‚úÖ –í–ï–†–î–ò–ö–¢: –¢–†–ï–ë–£–ï–¢–°–Ø –†–£–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê.",
                bg=COLORS["success"],
                fg="white",
                font=("Segoe UI", 12, "bold")
            )
            if self.settings["sounds"].get():
                SoundManager.play_clean_system()

    def check_recycle_bin(self):
        self.log_message("üóë –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã...")
        if self.settings["sounds"].get():
            SoundManager.play_recycle_info()

        result = self.recycle_checker.check()

        bin_window = tk.Toplevel(self.root)
        bin_window.title("–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
        bin_window.geometry("800x600")
        bin_window.configure(bg=COLORS["bg"])

        header = tk.Frame(bin_window, bg=COLORS["warning"], height=60)
        header.pack(fill=tk.X)
        header.pack_propagate(False)

        tk.Label(header, text="üóë –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", font=("Segoe UI", 16, "bold"),
                 bg=COLORS["warning"], fg="white").pack(pady=18)

        content = tk.Frame(bin_window, bg=COLORS["card"])
        content.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        clear_frame = tk.Frame(content, bg=COLORS["input_bg"], relief="flat")
        clear_frame.pack(fill=tk.X, pady=(0, 15))

        if result["cleared"] and result["clear_date"]:
            tk.Label(clear_frame, text="‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–∞–ª–∞—Å—å:", font=("Segoe UI", 11, "bold"),
                     bg=COLORS["input_bg"], fg=COLORS["success"]).pack(anchor="w", padx=15, pady=(15, 5))

            time_frame = tk.Frame(clear_frame, bg=COLORS["input_bg"])
            time_frame.pack(fill=tk.X, padx=15, pady=(0, 15))

            tk.Label(time_frame, text=f"üìÖ –î–∞—Ç–∞: {result['clear_date']}", font=("Consolas", 11),
                     bg=COLORS["input_bg"], fg=COLORS["text"]).pack(side=tk.LEFT)

            tk.Label(time_frame, text=f"üïí –í—Ä–µ–º—è: {result['clear_time']}", font=("Consolas", 11),
                     bg=COLORS["input_bg"], fg=COLORS["text"]).pack(side=tk.RIGHT)
        else:
            tk.Label(clear_frame, text="‚ùì –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—á–∏—Å—Ç–∫–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
                     font=("Segoe UI", 11), bg=COLORS["input_bg"], fg=COLORS["text_light"]).pack(anchor="w", padx=15,
                                                                                                 pady=15)

        if result["clear_history"]:
            history_frame = tk.Frame(content, bg=COLORS["input_bg"])
            history_frame.pack(fill=tk.X, pady=(0, 15))

            tk.Label(history_frame, text="üìã –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—Å—Ç–æ–∫:", font=("Segoe UI", 11, "bold"),
                     bg=COLORS["input_bg"], fg=COLORS["accent"]).pack(anchor="w", padx=15, pady=(15, 5))

            history_text = scrolledtext.ScrolledText(history_frame, height=6,
                                                     bg=COLORS["card"], fg=COLORS["text"],
                                                     font=("Consolas", 9), wrap=tk.WORD)
            history_text.pack(fill=tk.X, padx=15, pady=(0, 15))

            for i, clear in enumerate(result["clear_history"][:10]):
                history_text.insert(tk.END,
                                    f"{i + 1}. üìÖ {clear['date']} üïí {clear['time']} (–æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {clear['detected_at']})\n")
            history_text.config(state=tk.DISABLED)

        if result["deleted"]:
            tk.Label(content, text=f"üìÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(result['deleted'])}",
                     font=("Segoe UI", 12, "bold"), bg=COLORS["card"], fg=COLORS["danger"]).pack(anchor="w",
                                                                                                 pady=(10, 10))

            files_text = scrolledtext.ScrolledText(content, height=12,
                                                   bg=COLORS["input_bg"], fg=COLORS["text"],
                                                   font=("Consolas", 9), wrap=tk.WORD)
            files_text.pack(fill=tk.BOTH, expand=True)

            for item in result["deleted"][:20]:
                files_text.insert(tk.END, f"üìÑ {item['name']}\n")
                files_text.insert(tk.END, f"   –†–∞–∑–º–µ—Ä: {item['size']} KB | ")
                files_text.insert(tk.END, f"–î–∞—Ç–∞: {item['date']} | ")
                files_text.insert(tk.END, f"–í—Ä–µ–º—è: {item['time']}\n")
                files_text.insert(tk.END, f"   –ü—É—Ç—å: {item['path']}\n\n")

            files_text.config(state=tk.DISABLED)
        else:
            tk.Label(content, text="‚úÖ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ",
                     font=("Segoe UI", 11), bg=COLORS["card"], fg=COLORS["success"]).pack(anchor="w", pady=20)

        button_frame = tk.Frame(bin_window, bg=COLORS["bg"])
        button_frame.pack(pady=15)

        if result["clear_history"]:
            tk.Button(button_frame, text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
                      command=lambda: [self.recycle_checker.clear_history_data(), bin_window.destroy(),
                                       self.check_recycle_bin()],
                      bg=COLORS["danger"], fg="white", font=("Segoe UI", 10),
                      relief="flat", padx=15, pady=8).pack(side=tk.LEFT, padx=5)

        tk.Button(button_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                  command=lambda: [bin_window.destroy(), self.check_recycle_bin()],
                  bg=COLORS["accent"], fg="white", font=("Segoe UI", 10),
                  relief="flat", padx=15, pady=8).pack(side=tk.LEFT, padx=5)

        tk.Button(button_frame, text="–ó–∞–∫—Ä—ã—Ç—å", command=bin_window.destroy,
                  bg=COLORS["hover"], fg="white", font=("Segoe UI", 10),
                  relief="flat", padx=15, pady=8).pack(side=tk.LEFT, padx=5)

        self.log_message("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    def start_scan(self):
        path = self.path_var.get()
        if not os.path.exists(path):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return

        self.verdict_label.config(
            text="üöÄ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï...",
            bg=COLORS["warning"],
            fg="white",
            font=("Segoe UI", 14, "bold")
        )
        self.verdict_shown = False

        if self.settings["sounds"].get():
            SoundManager.play_scan_start()

        for item in self.results_tree.get_children():
            self.results_tree.delete(item)

        self.log_text.delete(1.0, tk.END)

        for key in self.stats_labels:
            self.stats_labels[key].config(text="0")

        self.progress_bar["value"] = 0

        self.scan_btn.config(state=tk.DISABLED)
        self.stop_btn.config(state=tk.NORMAL)

        self.log_message(f"üöÄ –ó–∞–ø—É—Å–∫ –≤—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {path}")
        self.log_message(
            f"‚ö° –ü–æ—Ç–æ–∫–∏: {self.detector.max_threads}, –ê–ª–≥–æ—Ä–∏—Ç–º: {'–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô' if self.settings['fast_scan'].get() else '–°–¢–ê–ù–î–ê–†–¢–ù–´–ô'}")

        scan_thread = threading.Thread(target=self._scan_thread, args=(path,), daemon=True)
        scan_thread.start()

    def _scan_thread(self, base_path):
        start_time = time.time()

        jars = self.detector.find_jars(base_path)
        self.log_message(f"üì¶ –ù–∞–π–¥–µ–Ω–æ JAR —Ñ–∞–π–ª–æ–≤: {len(jars)} –∑–∞ {time.time() - start_time:.2f}—Å")

        if not jars:
            self.log_message("‚ÑπÔ∏è JAR —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            self.scan_finished()
            return

        if self.settings["fast_scan"].get():
            results = self.detector.scan(jars, self.update_progress, self.log_message, self.settings["scan_exe"].get())
        else:
            results = self.detector.scan(jars, self.update_progress, self.log_message, self.settings["scan_exe"].get())

        total_time = time.time() - start_time
        self.log_message(f"‚è±Ô∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        self.log_message(f"üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {len(jars) / total_time:.1f} —Ñ–∞–π–ª–æ–≤/—Å–µ–∫—É–Ω–¥—É")

        for result in results:
            self.add_scan_result(result)

        self.show_verdict(bool(results), len(results))

        if results:
            self.log_message(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É–≥—Ä–æ–∑: {len(results)}")
            self.log_message("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
            self.log_message("‚ïë         üî¥ –í–ï–†–î–ò–ö–¢: –ß–ò–¢–ï–†!         ‚ïë")
            self.log_message("‚ïë    –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —á–∏—Ç—ã –∏ –º–æ–¥—ã!         ‚ïë")
            self.log_message("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
        else:
            self.log_message("‚úÖ –£–≥—Ä–æ–∑ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ - —Å–∏—Å—Ç–µ–º–∞ —á–∏—Å—Ç–∞!")
            self.log_message("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
            self.log_message("‚ïë         üü¢ –í–ï–†–î–ò–ö–¢: –ß–ò–°–¢!          ‚ïë")
            self.log_message("‚ïë     –ß–∏—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã!            ‚ïë")
            self.log_message("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")

        self.scan_finished()

    def scan_finished(self):
        self.scan_btn.config(state=tk.NORMAL)
        self.stop_btn.config(state=tk.DISABLED)
        if self.settings["sounds"].get():
            SoundManager.play_scan_complete()

    def browse_path(self):
        path = filedialog.askdirectory(initialdir=self.path_var.get())
        if path:
            self.path_var.set(path)

    def log_message(self, message):
        timestamp = time.strftime('%H:%M:%S')
        self.log_text.insert(tk.END, f"[{timestamp}] {message}\n")
        self.log_text.see(tk.END)

    def update_progress(self, stats):
        for key, value in stats.items():
            if key in self.stats_labels:
                self.stats_labels[key].config(text=str(value))

        if stats["total"] > 0:
            self.progress_bar["value"] = (stats["checked"] / stats["total"]) * 100

        import psutil
        self.cpu_label.config(text=f"CPU: {psutil.cpu_percent():.1f}%")
        self.mem_label.config(text=f"RAM: {psutil.virtual_memory().percent:.1f}%")
        self.root.update_idletasks()

    def add_scan_result(self, result):
        file_type = result.get("file_type", "JAR")

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ conditions_met
        conditions_met = result.get("conditions_met", [])

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç
        if not isinstance(conditions_met, (list, tuple)):
            if isinstance(conditions_met, (int, float)):
                conditions_met = [str(conditions_met)]
            else:
                conditions_met = [str(conditions_met)] if conditions_met else []

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —É—Å–ª–æ–≤–∏–π
        conditions_str = " | ".join(map(str, conditions_met)) if conditions_met else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        self.results_tree.insert("", 0, values=(
            result["name"],
            result["file_size_kb"],
            file_type,
            result["cheat_type"],
            f"{result['match_score']}/3",
            conditions_str
        ))

    def stop_scan(self):
        self.detector.scanning = False
        self.log_message("‚èπ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

    def open_file_location(self, event):
        selection = self.results_tree.selection()
        if not selection:
            return

        file_name = self.results_tree.item(selection[0])["values"][0]

        for result in self.detector.results:
            if result["name"] == file_name:
                folder_path = os.path.dirname(result["path"])
                self.root.clipboard_clear()
                self.root.clipboard_append(folder_path)
                self.root.update()

                try:
                    subprocess.Popen(f'explorer /select,"{result["path"]}"')
                except:
                    pass

                self.log_message(f"üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –ø—É—Ç—å: {folder_path}")
                break

    def show_threat_details(self, event):
        selection = self.results_tree.selection()
        if not selection:
            return

        file_name = self.results_tree.item(selection[0])["values"][0]

        for result in self.detector.results:
            if result["name"] == file_name:
                self.show_detailed_threat_info(result)
                break

    def show_detailed_threat_info(self, result):
        details_window = tk.Toplevel(self.root)
        details_window.title(f"–î–µ—Ç–∞–ª–∏ —É–≥—Ä–æ–∑—ã: {result['name']}")
        details_window.geometry("700x600")
        details_window.configure(bg=COLORS["bg"])

        header = tk.Frame(details_window, bg=COLORS["danger"], height=60)
        header.pack(fill=tk.X)
        header.pack_propagate(False)

        tk.Label(header, text=f"üö® {result['cheat_type']}", font=("Segoe UI", 16, "bold"),
                 bg=COLORS["danger"], fg="white").pack(pady=18)

        content = tk.Frame(details_window, bg=COLORS["card"])
        content.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        file_type = result.get("file_type", "JAR")

        info_labels = [
            ("–§–∞–π–ª:", result["name"]),
            ("–¢–∏–ø —Ñ–∞–π–ª–∞:", file_type),
            ("–ü–æ–ª–Ω—ã–π –ø—É—Ç—å:", result["path"]),
            ("–†–∞–∑–º–µ—Ä:", f"{result['file_size_kb']} KB"),
            ("–°–æ–≤–ø–∞–¥–µ–Ω–∏–π:", f"{result['match_score']}/3 —É—Å–ª–æ–≤–∏–π"),
            ("–£—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑—ã:", "–í–´–°–û–ö–ò–ô" if result.get('strict_mode', False) else "–°–†–ï–î–ù–ò–ô")
        ]

        for label, value in info_labels:
            row = tk.Frame(content, bg=COLORS["input_bg"])
            row.pack(fill=tk.X, pady=5)

            tk.Label(row, text=label, font=("Segoe UI", 10, "bold"),
                     bg=COLORS["input_bg"], fg=COLORS["text_light"],
                     width=15, anchor="w").pack(side=tk.LEFT, padx=10, pady=8)

            tk.Label(row, text=value, font=("Consolas", 9),
                     bg=COLORS["input_bg"], fg=COLORS["text"],
                     anchor="w").pack(side=tk.LEFT, padx=10, pady=8, fill=tk.X, expand=True)

        if result["found_dirs"]:
            tk.Label(content, text="üìÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:", font=("Segoe UI", 11, "bold"),
                     bg=COLORS["card"], fg=COLORS["accent"]).pack(anchor="w", pady=(15, 5))

            for directory in result["found_dirs"]:
                tk.Label(content, text=f"  ‚Ä¢ {directory}", font=("Consolas", 9),
                         bg=COLORS["card"], fg=COLORS["success"]).pack(anchor="w", padx=20)

        if result["found_classes"]:
            tk.Label(content, text="üìÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã:", font=("Segoe UI", 11, "bold"),
                     bg=COLORS["card"], fg=COLORS["accent"]).pack(anchor="w", pady=(15, 5))

            for class_name in result["found_classes"]:
                tk.Label(content, text=f"  ‚Ä¢ {class_name}", font=("Consolas", 9),
                         bg=COLORS["card"], fg=COLORS["success"]).pack(anchor="w", padx=20)

        tk.Label(content, text="üìã –î–µ—Ç–∞–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è:", font=("Segoe UI", 11, "bold"),
                 bg=COLORS["card"], fg=COLORS["accent"]).pack(anchor="w", pady=(15, 5))

        details_text = scrolledtext.ScrolledText(content, height=10,
                                                 bg=COLORS["input_bg"], fg=COLORS["text"],
                                                 font=("Consolas", 9), wrap=tk.WORD, relief="flat")
        details_text.pack(fill=tk.BOTH, expand=True, pady=5)

        for detail in result["details"]:
            details_text.insert(tk.END, f"{detail}\n")

        details_text.config(state=tk.DISABLED)

        button_frame = tk.Frame(details_window, bg=COLORS["bg"])
        button_frame.pack(pady=15)

        tk.Button(button_frame, text="üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É",
                  command=lambda: subprocess.Popen(f'explorer /select,"{result["path"]}"'),
                  bg=COLORS["accent"], fg="white", font=("Segoe UI", 10, "bold"),
                  relief="flat", padx=20, pady=10, cursor="hand2").pack(side=tk.LEFT, padx=5)

        tk.Button(button_frame, text="üóë –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª",
                  command=lambda: self.delete_threat_file(result["path"]),
                  bg=COLORS["danger"], fg="white", font=("Segoe UI", 10, "bold"),
                  relief="flat", padx=20, pady=10, cursor="hand2").pack(side=tk.LEFT, padx=5)

        tk.Button(button_frame, text="–ó–∞–∫—Ä—ã—Ç—å", command=details_window.destroy,
                  bg=COLORS["hover"], fg="white", font=("Segoe UI", 10, "bold"),
                  relief="flat", padx=20, pady=10, cursor="hand2").pack(side=tk.LEFT, padx=5)

    def delete_threat_file(self, file_path):
        try:
            os.remove(file_path)
            self.log_message(f"üóë –§–∞–π–ª —É–¥–∞–ª–µ–Ω: {os.path.basename(file_path)}")
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–§–∞–π–ª —É–≥—Ä–æ–∑—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: {str(e)}")

    def search_database(self):
        try:
            weight = float(self.search_weight.get())
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å!")
            return

        keyword = self.search_name.get().strip()
        results = []

        for name, data in self.detector.active.items():
            for size in data.get("sizes_kb", []):
                if abs(weight - size) <= self.detector.tolerance_kb:
                    results.append((name, size))
            if keyword and keyword.lower() in name.lower():
                results.append((name, None))

        if not results:
            messagebox.showinfo("–ü–æ–∏—Å–∫", "–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç")
            return

        message = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n"
        for name, size in results:
            if size:
                message += f"‚Ä¢ {name} ({size} KB)\n"
            else:
                message += f"‚Ä¢ {name}\n"

        messagebox.showinfo("–ü–æ–∏—Å–∫", message)
        self.log_message(f"üîç –ù–∞–π–¥–µ–Ω–æ: {len(results)}")

    def clear_cache(self):
        success, message = self.detector.clear_cache()
        if success:
            self.log_message("üßπ –ö—ç—à —Å–∫–∞–Ω–µ—Ä–∞ –æ—á–∏—â–µ–Ω")
            messagebox.showinfo("–£—Å–ø–µ—Ö", message)
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", message)

    def show_db_stats(self):
        db_info = self.detector.db.get_database_info()
        stats = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:

–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {db_info['total']}
–ß–∏—Ç—ã —Å–æ —Å—Ç—Ä–æ–≥–∏–º —Ä–µ–∂–∏–º–æ–º: {db_info['strict_mode']}
–û–±—ã—á–Ω—ã–µ —á–∏—Ç—ã: {db_info['total'] - db_info['strict_mode']}

–° —Ä–∞–∑–º–µ—Ä–∞–º–∏: {db_info['with_sizes']}
–° –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏: {db_info['with_dirs']}
–° –∫–ª–∞—Å—Å–∞–º–∏: {db_info['with_classes']}

–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {db_info['last_update'] or '–ù–∏–∫–æ–≥–¥–∞'}
        """
        messagebox.showinfo("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã", stats)

    def update_database(self):
        self.log_message("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets...")

        progress_window = tk.Toplevel(self.root)
        progress_window.title("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        progress_window.geometry("400x150")
        progress_window.configure(bg=COLORS["bg"])
        progress_window.resizable(False, False)
        progress_window.transient(self.root)
        progress_window.grab_set()

        tk.Label(progress_window, text="üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...",
                 font=("Segoe UI", 12, "bold"), bg=COLORS["bg"], fg=COLORS["text"]).pack(pady=20)

        progress = ttk.Progressbar(progress_window, mode='indeterminate')
        progress.pack(fill=tk.X, padx=50, pady=10)
        progress.start()

        tk.Label(progress_window, text="–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥",
                 font=("Segoe UI", 9), bg=COLORS["bg"], fg=COLORS["text_light"]).pack(pady=5)

        def update_thread():
            success, message = self.detector.db.update_from_google_sheets()

            if success:
                self.detector.active = self.detector.db.cheat_database

            progress_window.after(0, lambda: self._update_finished(success, message, progress_window))

        threading.Thread(target=update_thread, daemon=True).start()

    def _update_finished(self, success, message, progress_window):
        progress_window.destroy()

        if success:
            self.log_message(f"‚úÖ {message}")

            db_info = self.detector.db.get_database_info()
            info_msg = f"""
‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {db_info['total']}
‚Ä¢ –° —Ä–∞–∑–º–µ—Ä–∞–º–∏: {db_info['with_sizes']}
‚Ä¢ –° –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏: {db_info['with_dirs']} 
‚Ä¢ –° –∫–ª–∞—Å—Å–∞–º–∏: {db_info['with_classes']}
‚Ä¢ –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º: {db_info['strict_mode']}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {db_info['last_update']}
"""
            messagebox.showinfo("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", info_msg)

            errors, warnings = self.detector.db.validate_database()
            if warnings:
                self.log_message(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –±–∞–∑—ã: {len(warnings)}")
            if errors:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∏ –±–∞–∑—ã: {len(errors)}")

        else:
            self.log_message(f"‚ùå {message}")
            messagebox.showerror("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                                 f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:\n{message}\n\n"
                                 f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã.")

    def show_database_manager(self):
        db_window = tk.Toplevel(self.root)
        db_window.title("üóÉÔ∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        db_window.geometry("800x600")
        db_window.configure(bg=COLORS["bg"])
        db_window.resizable(True, True)

        header = tk.Frame(db_window, bg=COLORS["accent"], height=60)
        header.pack(fill=tk.X)
        header.pack_propagate(False)

        tk.Label(header, text="üóÉÔ∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", font=("Segoe UI", 16, "bold"),
                 bg=COLORS["accent"], fg="white").pack(pady=18)

        content = tk.Frame(db_window, bg=COLORS["card"])
        content.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        info_frame = tk.Frame(content, bg=COLORS["input_bg"], relief="flat")
        info_frame.pack(fill=tk.X, pady=(0, 15))

        db_info = self.detector.db.get_database_info()

        info_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:

‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {db_info['total']}
‚Ä¢ –ó–∞–ø–∏—Å–µ–π —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏: {db_info['with_sizes']}
‚Ä¢ –ó–∞–ø–∏—Å–µ–π —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏: {db_info['with_dirs']}
‚Ä¢ –ó–∞–ø–∏—Å–µ–π —Å –∫–ª–∞—Å—Å–∞–º–∏: {db_info['with_classes']}
‚Ä¢ –í —Å—Ç—Ä–æ–≥–æ–º —Ä–µ–∂–∏–º–µ: {db_info['strict_mode']}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {db_info['last_update'] or '–ù–∏–∫–æ–≥–¥–∞'}
"""
        tk.Label(info_frame, text=info_text, font=("Consolas", 10),
                 bg=COLORS["input_bg"], fg=COLORS["text"], justify=tk.LEFT).pack(padx=15, pady=15)

        buttons_frame = tk.Frame(content, bg=COLORS["card"])
        buttons_frame.pack(fill=tk.X, pady=10)

        action_buttons = [
            ("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–∑ Google Sheets", self.update_database),
            ("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å", self.validate_database),
            ("üíæ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø", self.create_backup),
            ("üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞", self.restore_backup),
            ("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", self.clear_database_cache)
        ]

        for text, command in action_buttons:
            btn = tk.Button(buttons_frame, text=text, command=command,
                            bg=COLORS["hover"], fg=COLORS["text"], font=("Segoe UI", 10),
                            relief="flat", cursor="hand2", pady=8)
            btn.pack(fill=tk.X, pady=5)

        list_frame = tk.Frame(content, bg=COLORS["card"])
        list_frame.pack(fill=tk.BOTH, expand=True, pady=(15, 0))

        tk.Label(list_frame, text="üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ:", font=("Segoe UI", 11, "bold"),
                 bg=COLORS["card"], fg=COLORS["text"]).pack(anchor="w", pady=(0, 10))

        list_container = tk.Frame(list_frame, bg=COLORS["card"])
        list_container.pack(fill=tk.BOTH, expand=True)

        scrollbar = ttk.Scrollbar(list_container)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        cheat_list = tk.Listbox(list_container, yscrollcommand=scrollbar.set,
                                bg=COLORS["input_bg"], fg=COLORS["text"],
                                font=("Consolas", 9), selectbackground=COLORS["accent"])
        cheat_list.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        scrollbar.config(command=cheat_list.yview)

        for i, (name, data) in enumerate(self.detector.db.cheat_database.items()):
            has_size = "üìè" if data.get("sizes_kb") else "„ÄÄ"
            has_dir = "üìÅ" if data.get("directories") else "„ÄÄ"
            has_class = "üìÑ" if data.get("classes") else "„ÄÄ"
            strict = "üîí" if data.get("strict_mode") else "„ÄÄ"

            cheat_list.insert(tk.END, f"{has_size}{has_dir}{has_class}{strict} {name}")

        cheat_list.bind("<Double-Button-1>", lambda e: self.show_cheat_details_manager(cheat_list, db_window))

        tk.Button(content, text="–ó–∞–∫—Ä—ã—Ç—å", command=db_window.destroy,
                  bg=COLORS["danger"], fg="white", font=("Segoe UI", 10, "bold"),
                  relief="flat", padx=30, pady=10, cursor="hand2").pack(pady=15)

    def show_cheat_details_manager(self, cheat_list, parent_window):
        selection = cheat_list.curselection()
        if not selection:
            return

        cheat_name = cheat_list.get(selection[0]).split(" ", 1)[1]
        cheat_data = self.detector.db.cheat_database.get(cheat_name)

        if not cheat_data:
            return

        self.show_cheat_details()

    def validate_database(self):
        errors, warnings = self.detector.db.validate_database()

        result_text = "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Ä—è–¥–∫–µ!"

        if warnings:
            result_text = f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ({len(warnings)}):\n" + "\n".join(f"‚Ä¢ {w}" for w in warnings[:10])
            if len(warnings) > 10:
                result_text += f"\n‚Ä¢ ... –∏ –µ—â–µ {len(warnings) - 10}"

        if errors:
            result_text = f"‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ ({len(errors)}):\n" + "\n".join(f"‚Ä¢ {e}" for e in errors[:10])
            if len(errors) > 10:
                result_text += f"\n‚Ä¢ ... –∏ –µ—â–µ {len(errors) - 10}"

        messagebox.showinfo("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã", result_text)
        self.log_message(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: {len(errors)} –æ—à–∏–±–æ–∫, {len(warnings)} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")

    def create_backup(self):
        self.detector.db._save_backup()
        messagebox.showinfo("–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω", "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        self.log_message("üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

    def restore_backup(self):
        backup_file = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )

        if backup_file:
            success, message = self.detector.db.restore_backup(backup_file)
            if success:
                self.detector.active = self.detector.db.cheat_database
                messagebox.showinfo("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", message)
                self.log_message("üì• –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –±—ç–∫–∞–ø–∞")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", message)

    def clear_database_cache(self):
        try:
            self.log_message("üßπ –ö—ç—à –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω")
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ö—ç—à –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω!")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à: {str(e)}")

    def export_results(self):
        if not self.detector.results:
            messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return

        try:
            file_path = filedialog.asksaveasfilename(
                defaultextension=".txt",
                filetypes=[("Text files", "*.txt"), ("All files", "*.*")],
                title="–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
            )

            if file_path:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write("GAMMA DETECTOR - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n")
                    f.write("=" * 50 + "\n")
                    f.write(f"–î–∞—Ç–∞: {time.strftime('%d.%m.%Y %H:%M:%S')}\n")
                    f.write(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É–≥—Ä–æ–∑: {len(self.detector.results)}\n\n")

                    for i, result in enumerate(self.detector.results, 1):
                        file_type = result.get("file_type", "JAR")
                        f.write(f"–£–ì–†–û–ó–ê #{i}\n")
                        f.write(f"–§–∞–π–ª: {result['name']}\n")
                        f.write(f"–¢–∏–ø —Ñ–∞–π–ª–∞: {file_type}\n")
                        f.write(f"–¢–∏–ø —á–∏—Ç–∞: {result['cheat_type']}\n")
                        f.write(f"–†–∞–∑–º–µ—Ä: {result['file_size_kb']} KB\n")
                        f.write(f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {result['match_score']}/3\n")
                        f.write(f"–ü—É—Ç—å: {result['path']}\n")
                        f.write("–î–µ—Ç–∞–ª–∏:\n")
                        for detail in result['details']:
                            f.write(f"  - {detail}\n")
                        f.write("\n" + "-" * 40 + "\n\n")

                self.log_message(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: {file_path}")
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤:\n{file_path}")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {str(e)}")

    def text_detector(self):
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )

        if file_path:
            try:
                with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                    text = f.read()

                suspicious_keywords = [
                    "cheat", "hack", "exploit", "bypass", "inject", "crack",
                    "ghost", "aimbot", "xray", "noclip", "flyhack", "killaura",
                    "autoclick", "reach", "velocity", "noslow", "speedmine"
                ]

                found_keywords = []
                text_lower = text.lower()

                for keyword in suspicious_keywords:
                    if keyword in text_lower:
                        found_keywords.append(keyword)

                if found_keywords:
                    result = f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n\n"
                    for keyword in found_keywords:
                        result += f"‚Ä¢ {keyword}\n"

                    result += f"\n–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(found_keywords)}"
                    messagebox.showwarning("–¢–µ–∫—Å—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä", result)
                    self.log_message(f"üìÑ –¢–µ–∫—Å—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(found_keywords)} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤")
                else:
                    messagebox.showinfo("–¢–µ–∫—Å—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä", "‚úÖ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
                    self.log_message("üìÑ –¢–µ–∫—Å—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä: –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª: {str(e)}")

    def quick_scan(self):
        quick_paths = [
            str(Path.home() / ".minecraft" / "mods"),
            str(Path.home() / "AppData" / "Roaming" / ".minecraft" / "mods"),
            str(Path.home() / "Downloads")
        ]

        for path in quick_paths:
            if os.path.exists(path):
                self.path_var.set(path)
                self.start_scan()
                return

        messagebox.showinfo("–ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –ø—É—Ç—å –≤—Ä—É—á–Ω—É—é.")